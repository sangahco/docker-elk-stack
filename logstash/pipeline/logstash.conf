input {
  tcp {
    port => 5000
    type => syslog
    codec => multiline {
      pattern => "%{SPACE}at %{JAVACLASS:class}\.%{JAVAMETHOD:method}"
      what => "previous"
      multiline_tag => "drop"
    }
  }
  # udp {
  #   port => 5000
  #   type => syslog
  #   codec => multiline {
  #     pattern => "%{SPACE}at %{JAVACLASS:class}\.%{JAVAMETHOD:method}"
  #     what => "previous"
  #     multiline_tag => "drop"
  #   }
  # }
  #stdin { }
  beats {
    port => 5043
    # codec => multiline {
    #   pattern => "%{SPACE}at %{JAVACLASS:class}\.%{JAVAMETHOD:method}"
    #   what => "previous"
    # }
  }
}

filter {
  if "drop" in [tags] {
    drop { }
  }
  
  if [type] == "syslog" {
    grok {
      match => { "message" => "(?m)%{SYSLOG5424PRI}%{NONNEGINT:ver} +(?:%{TIMESTAMP_ISO8601:ts}|-) +(?:%{HOSTNAME:containerid}|-) +(?:%{NOTSPACE:containername}|-) +(?:%{NOTSPACE:proc}|-) +(?:%{WORD:msgid}|-) +(?:%{SYSLOG5424SD:sd}|-|) +%{GREEDYDATA:msg}" }
      add_tag => [ "syslog" ]
    }
    syslog_pri { }
    date {
      match => [ "ts", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601" ]
      remove_field => [ "ts" ]
    }
  }

  if ![msg] {
    mutate {
      add_field => { "msg" => "%{message}" }
    }
  }
  grok {
    #match => { "msg" => "%{IP:client_host}%{SPACE}%{GREEDYDATA:msg}" }
    match => { "msg" => "%{COMMONAPACHELOG}" }
    add_tag => [ "httpd_log" ]
    add_field => { "apache_timestamp" => "%{timestamp}" }
    remove_field => [ "timestamp" ]
  }

  date {
    match => [ "apache_timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    remove_field => [ "apache_timestamp" ]
  }

  grok {
    pattern_definitions => { "AUDDATE" => "%{YEAR}-%{MONTHNUM2}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}" }
    match => { "msg" => "%{AUDDATE:auditlog_datestamp} - %{IP:clientip} - %{WORD:auditlog_project}? - %{WORD:auditlog_userid}? - %{WORD:auditlog_event} - %{GREEDYDATA:auditlog_query}" }
    add_tag => [ "auditlog" ]
  }
  date {
    match => [ "auditlog_datestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
    remove_field => [ "auditlog_datestamp" ]
    timezone => "Asia/Seoul"
  }

  grok {
    pattern_definitions => { "EVENTDATE" => "%{YEAR}-%{MONTHNUM2}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}" }
    match => { "msg" => '%{EVENTDATE:event_date}%{GREEDYDATA} - %{NOTSPACE:event}{("event_project":"%{WORD:event_project}",)?"event_user":"%{WORD:event_user}","event_ip":"%{IP:clientip}",%{GREEDYDATA}"event_type":"%{WORD:event_type}"}' }
    add_tag => [ "pmis_event" ]
  }
  date {
    match => [ "event_date", "yyyy-MM-dd HH:mm:ss,SSS" ]
    remove_field => [ "event_date" ]
    timezone => "Asia/Seoul"
  }

  geoip {
      source => "clientip"
      add_tag => [ "geoip" ]
  }

  mutate {
    # this should be the last mutate
    replace => [ "message", "%{msg}" ]
    remove_field => [ "msg" ]
    remove_tag => [ "_grokparsefailure" ]
  }
}

output {
    elasticsearch { 
      hosts => ["${ES_HOST}"]
      user => "${ES_USER}"
      password => "${ES_PASSWORD}"
      #ssl => true
      ssl_certificate_verification => false
      timeout => 240
      #cacert => '${LS_HOME}/config/ssl/ca.pem'
    }
    stdout { codec => rubydebug }
}